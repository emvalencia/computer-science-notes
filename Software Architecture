
Software Architecture 
-------------------------
Styles:
I.    Object-oriented 
II.   Model-view-controllers
III.  Client-server
IV.   Layered
V.    Peer-to-peer
VI.   Pipe-and-filter
VII.  Publish and subscribe 

Definition: software architecture is the set of principal design decision about the system; the blueprint
  for a system's construction and evolution 
  
Architecture in software allows:
- Intellectual control
- Conceptual integrity
- Effective project communication 
- Reusability 
- Maintainability 

Architect: distinct role in a project with broad training, experience, sense of aesthetics, and a deep 
  understanding of the domain 
  
Internet example: collection of resources with unique URLs that can identify a machine from which the 
  resource may be obtained, clients make requests of servers for resources, communication between user
  agents and origin servers is performed by a simple, generic protocol (HTTP), all communications must be
  fully self-contained
  - Note: no single piece of code can implement the internet's architecture, style constraints are not
    apparent in code, is understood from an architectural view
    
Software architecture is made up of:
- Components: data, processing
- Connectors: interaction (function call, shared memory, info streams...)
- Configuration: arrangement of components and connectors 

Architecture erosion happens when a system's prescriptive and descriptive architectures don't match
- Prescriptive: as-designed/intended, captures design decisions before the system's implementation
- Descriptive: as-implemented, describes how the system has actually been built 
- Happens due to developer sloppiness, short deadlines, lack of documented prescriptive architecture, 
  code optimizations, inadequate techniques or tool support 
  
I. Object-oriented style
   - Everything is an object
   - Strengths: abstraction, anticipation of change, understandability 
   - Ex. Business applications, ship radar system 
    
II. Model-view-controllers
    - Model is the system, view is what the actors can see, controllers are what the actor controls that 
      communicates with the model
    - Strengths: modularity, anticipation of change
    - Ex. Web applications, atm machine 
    
III. Client-server 
    - Multiple clients are connected to a single server, can have multiple servers 
    - Strengths: centralized control
    - Weakness: if one server goes down, none of the clients get info
    - Ex. Games, email 
    
IV. Layered
    - Multiple layers and modular
    - Strengths: modularity, abstraction, anticipation of change 
    - Ex. Operating systems
    
V. Peer-to-peer
    - No server involved
    - Strengths: efficiency, robustness
    - Ex. File-sharing 
    
VI. Pipe-and-filter
    - Strengths: efficiency, scalability
    - Ex. Stock market, news 

@copy: Most notes are property of Professor Ziv and Navarro at UCI
